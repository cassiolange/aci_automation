---
- import_playbook: update.yml

- name : Fabric Policy
  gather_facts: false
  hosts: all
  vars_files:
   - "{{ aci_variable_filename }}"
  vars:
     - aci_login: &aci_login
          host: '{{ ansible_host }}'
          user: '{{ ansible_user }}'
          password: '{{ ansible_password }}'
          validate_certs: "{{ validate_certs }}"

  tasks:
    - name: Add Power Supply Policies
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
          		  <psuInstPol name="{{item['name']}}" descr="{{item['description']}}" adminRdnM="{{item['power_state']}}"/>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      loop: "{{ power_supply_policy }}"
      when: power_supply_policy is defined

    - name: Add Fabric Node Controls Policies
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
          	<fabricInst>
                  {% if item['enable_dom'] == "yes" %}{% set dom_mode="Dom" %}{% endif %}
          		<fabricNodeControl name="{{item['name']}}" descr="{{item['description']}}"  featureSel="{{item['feature_selection']}}" control="{{dom_mode}}"/>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      loop: "{{ node_control }}"
      when: node_control is defined

    - name: Add Fabric Spine Switch Policy Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <fabricFuncP>
                      <fabricSpNodePGrp name="{{item['name']}}" descr="{{item['description']}}">
                          <fabricRsMonInstFabricPol tnMonFabricPolName="{{item['monitoring_policy']}}"/>
                          <fabricRsNodeTechSupP tnDbgexpTechSupPName="{{item['techsupport_export_policy']}}"/>
                          <fabricRsNodeCoreP tnDbgexpCorePName="{{item['core_export_policy']}}"/>
                          <fabricRsCallhomeInvPol tnCallhomeInvPName="{{item['callhome_policy']}}"/>
                          <fabricRsPsuInstPol tnPsuInstPolName="{{item['power_supply_policy']}}"/>
                          <fabricRsNodeCtrl tnFabricNodeControlName="{{item['node_control_policy']}}"/>
                      </fabricSpNodePGrp>
                  </fabricFuncP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      loop: "{{ fabric_spine_policy_group }}"
      when: fabric_spine_policy_group is defined

    - name: Add Fabric Leaf Switch Policy Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <fabricFuncP>
                      <fabricLeNodePGrp name="{{item['name']}}" descr="{{item['description']}}" >
                          <fabricRsMonInstFabricPol tnMonFabricPolName="{{item['monitoring_policy']}}"/>
                          <fabricRsNodeTechSupP tnDbgexpTechSupPName="{{item['techsupport_export_policy']}}"/>
                          <fabricRsNodeCoreP tnDbgexpCorePName="{{item['core_export_policy']}}"/>
                          <fabricRsCallhomeInvPol tnCallhomeInvPName="{{item['callhome_policy']}}"/>
                          <fabricRsPsuInstPol tnPsuInstPolName="{{item['power_supply_policy']}}"/>
                          <fabricRsNodeCtrl tnFabricNodeControlName="{{item['node_control_policy']}}"/>
                      </fabricLeNodePGrp>
                  </fabricFuncP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      loop: "{{ fabric_leaf_policy_group }}"
      when: fabric_leaf_policy_group is defined

    - name: Add Spine Fabric Switch Profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <fabricSpineP annotation="" descr="{{item['description']}}"  name="{{item['name']}}" >
                      <fabricSpineS  name="{{item['switch_selector']}}" type="range">
                          {% if item['switch_policy_group'] and item['switch_policy_group'] != "" %}
                            <fabricRsSpNodePGrp tDn="uni/fabric/funcprof/spnodepgrp-{{item['switch_policy_group']}}"/>
                          {% endif %}
                            <fabricNodeBlk descr="" from_="{{item['from_node_id'] | int }}" name="{{item['from_node_id'] | int }}{{item['to_node_id'] | int }}" to_="{{item['to_node_id'] | int }}"/>
                      </fabricSpineS>
                  </fabricSpineP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ fabric_switch_profile }}"
      when: fabric_switch_profile is defined and item.switch_profile_type == 'spine'

    - name: Add Leaf Fabric Switch Profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <fabricLeafP  descr="{{item['description']}}" name="{{item['name']}}">
                      <fabricLeafS  name="{{item['switch_selector']}}"  type="range">
                        {% if item['switch_policy_group'] and item['switch_policy_group'] != "" %}
                          <fabricRsLeNodePGrp  tDn="uni/fabric/funcprof/lenodepgrp-{{item['switch_policy_group']}}"/>
                        {% endif %}
                          <fabricNodeBlk  descr="" from_="{{item['from_node_id'] | int }}" name="{{item['from_node_id']  | int }}{{item['to_node_id']  | int }}" to_="{{item['to_node_id']  | int }}"/>
                      </fabricLeafS>
                  </fabricLeafP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ fabric_switch_profile }}"
      when: fabric_switch_profile is defined and item.switch_profile_type == 'leaf'

    - name: BGP AS and Route Reflector
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <bgpInstPol descr="" name="default" >
                      <bgpAsP asn="{{item['fabric_bgp_as']}}" name="bgp{{item['fabric_bgp_as']}}"/>
                      <bgpRRP name="rr{{item['fabric_bgp_as']}}" >
                          {% if item['bgp_rr_node_id'] !="" %}
                          <bgpRRNodePEp id="{{item['bgp_rr_node_id']}}" podId="{{item['pod_id']}}"/>
                          {% endif %}
                      </bgpRRP>
                  </bgpInstPol>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ bgp_rr }}"
      when: bgp_rr is defined

    - name: POD Policy Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <fabricFuncP>
                      <fabricPodPGrp descr="{{item['description']}}" name="{{item['name']}}" >
                          <fabricRsSnmpPol  tnSnmpPolName="{{item['snmp_pol']}}"/>
                          <fabricRsPodPGrpIsisDomP  tnIsisDomPolName="{{item['isis_pol']}}"/>
                          <fabricRsPodPGrpCoopP  tnCoopPolName="{{item['coop_pol']}}"/>
                          <fabricRsPodPGrpBGPRRP  tnBgpInstPolName="{{item['bgp_pol']}}"/>
                          <fabricRsTimePol  tnDatetimePolName="{{item['date_time_pol']}}"/>
                          <fabricRsMacsecPol  tnMacsecFabIfPolName="{{item['macsec_pol']}}"/>
                          <fabricRsCommPol  tnCommPolName="{{item['com_pol']}}"/>
                      </fabricPodPGrp>
                  </fabricFuncP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ pod_policy_group }}"
      when: pod_policy_group is defined

    - name: POD Profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          <polUni>
              <fabricInst>
                  <fabricPodP descr="{{item['description']}}" name="{{item['name']}}" status="{{ status }}" annotation="orchestrator:ansible"/>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ pod_profile }}"
      when: pod_profile is defined

    - name: POD Selector
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          {% set block_name = item['name']+range(1, 10000) | random | string %}
          <polUni>
              <fabricInst>
                  <fabricPodP name="{{item['pod_profile']}}" status="modified">
                      <fabricPodS name="{{item['name']}}" type="{{item['type'] | default("ALL",true)}}" status="{{ status }}" annotation="orchestrator:ansible">
                          <fabricRsPodPGrp  tDn="uni/fabric/funcprof/podpgrp-{{item['pod_policy_group']}}"/>
                          {% if item['type'] is defined and item['type']== "range" %}
          			      <fabricPodBlk from_="{{ item['pod_id'] |int }}" name="{{block_name}}" nameAlias="" to_="{{ item['pod_id'] |int }}"/>
                          {% endif %} 
                      </fabricPodS>
                  </fabricPodP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ pod_selector }}"
      when: pod_selector is defined

    - name: DNS Profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <dnsProfile IPVerPreference="IPv4" descr="{{item['description']}}"  name="{{item['name']}}">
                      <dnsRsProfileToEpg tDn="uni/tn-mgmt/mgmtp-default/{{item['management_epg']}}-default"/>
                      {% if item['domain_name'] and item['domain_name'] != "" %}
                      <dnsDomain descr="" isDefault="{{item['is_default_domain']|default('no',True)}}" name="{{item['domain_name']}}" />
                      {% endif %}
                  </dnsProfile>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ dns_profile }}"
      when: dns_profile is defined

    - name: DNS Provider
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <dnsProfile name="{{item['dns_profile_name']}}" status="modified">
                      <dnsProv addr="{{item['dns_server_address']}}" name="{{item['dns_server_name']}}" preferred="{{item['is_preferred_dns']|default(0,'no')}}" />
                  </dnsProfile>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ dns_provider }}"
      when: dns_provider is defined

    - name: Datetime Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <datetimePol StratumValue="{{item['stratum_value']|default('8',True)}}" adminSt="{{item['admin_state']}}" authSt="{{item['authentication_state']}}" descr="{{item['description']}}"  masterMode="{{item['master_mode']|default('disabled',True)}}" name="{{item['name']|default('default',True)}}" serverState="{{item['server_state']|default('disabled',True)}}">
                  </datetimePol>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ datetime_pol }}"
      when: datetime_pol is defined

    - name: Datetime NTP Provider
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <datetimePol name="{{item['datetime_pol_name']}}" status="modified">
                      <datetimeNtpProv descr="{{item['description']}}" keyId="{{item['key_id']|default('0',True)}}" maxPoll="{{item['max_poll']|default('6',True)}}" minPoll="{{item['min_poll']|default('4',True)}}" name="{{item['name']}}" preferred="{{item['is_preferred']|default('no',True)}}">
                          <datetimeRsNtpProvToEpg tDn="uni/tn-mgmt/mgmtp-default/{{item['management_epg']}}-default"/>
                          {% if item['key_id'] != "" and item['key_id'] != "0" %}
                              <datetimeRsNtpProvToNtpAuthKey tnDatetimeNtpAuthKeyId="{{item['key_id']}}"/>
                          {% endif %}
                      </datetimeNtpProv>
                  </datetimePol>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ datetime_ntp_prov }}"
      when: datetime_ntp_prov is defined

    - name: Configure an SNMP policy
      cisco.aci.aci_snmp_policy:
        <<: *aci_login
        admin_state: "{{ item.admin_state }}"
        name: "{{ item.name }}"
        contact: "{{ item.contact }}"
        location: "{{ item.location }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ snmp_policy }}"
      when: snmp_policy is defined

    - name: Configure an SNMP community policy
      cisco.aci.aci_snmp_community_policy:
        <<: *aci_login
        policy: "{{ item.snmp_policy_name }}"
        community: "{{ item.community_name }}"
        description: "{{  item.community_description if item.community_description is defined and item.community_description !='' else omit}}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ snmp_community }}"
      when: snmp_community is defined

    - name: Configure an SNMP user
      cisco.aci.aci_snmp_user:
        <<: *aci_login
        policy: "{{ item.snmp_policy_name }}"
        name: "{{ item.v3_user }}"
        privacy_type: "{{ item.privacy_type }}"
        privacy_key: "{{ item.privacy_key }}"
        auth_type: "{{ item.auth_type }}"
        auth_key: "{{ item.auth_key }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ snmp_v3_users }}"
      when: snmp_v3_users is defined

    - name: Configure an SNMP client group
      cisco.aci.aci_snmp_client_group:
        <<: *aci_login
        policy: "{{ item.snmp_policy }}"
        client_group: "{{ item.name }}"
        mgmt_epg: "{{ item.management_epg }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ snmp_client_group }}"
      when: snmp_client_group is defined

    - name: Configure an SNMP client
      cisco.aci.aci_snmp_client:
        <<: *aci_login
        policy: "{{ item.snmp_policy }}"
        client_group: "{{ item.name }}"
        address: "{{ item.client_entry_address }}"
        client_name: "{{ item.client_entry_name }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ snmp_client_group }}"
      when: snmp_client_group is defined

    - name: Configure SNMP Trap Forwarder
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fabricInst>
                  <snmpPol name="{{item['snmp_policy']}}" status="modified">
                      <snmpTrapFwdServerP addr="{{item['snmp_trap_fwd_address']}}" port="{{item['snmp_trap_fwd_port']|default('162',True)|int}}"/>
                  </snmpPol>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      loop: "{{ snmp_trap_forwarder }}"
      when: snmp_trap_forwarder is defined

    - name: Fabric interface Policy Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          <polUni>
              <fabricInst>
                  <fabricFuncP>
                      {% if item['switch_type'] is defined and item['switch_type'] == "spine" %}
                      <fabricSpPortPGrp annotation="orchestrator:ansible" descr="{{ item['description'] }}" name="{{ item['name'] }}" status="{{ status }}">
                      {% else %}
                      <fabricLePortPGrp annotation="orchestrator:ansible" descr="{{ item['description'] }}" name="{{ item['name'] }}" status="{{ status }}">
                      {% endif %}
                          <fabricRsMacsecFabIfPol tnMacsecFabIfPolName="{{ item['macsec'] | default('',true) }}"/>
                          <fabricRsL3IfPol tnL3IfPolName="" userdom="all"/>
                          <fabricRsFLinkFlapPol tnFabricFLinkFlapPolName="" />
                          <fabricRsMonIfFabricPol tnMonFabricPolName=""/>
                          <fabricRsFIfPol tnFabricFIfPolName="" userdom="all"/>
                          <fabricRsDwdmFabIfPol tnDwdmFabIfPolName=""/>
                          {% if item['transceiver'] is defined and item['transceiver'] != "" %}
                          <fabricRsOpticsFabIfPol tDn="uni/fabric/zrfab-{{ item['transceiver'] }}"/>
                          {% endif %}
                      {% if item['switch_type'] is defined and item['switch_type'] == "spine" %}
                      </fabricSpPortPGrp>
                      {% else %}
                      </fabricLePortPGrp>
                      {% endif %}
                  </fabricFuncP>
              </fabricInst>
          </polUni>
      delegate_to: localhost
      loop: "{{ fabric_interface_policy_group }}"
      when: fabric_interface_policy_group is defined