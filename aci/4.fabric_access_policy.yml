---
- import_playbook: update.yml

- name : Fabric External Access Policy
  gather_facts: false
  hosts: all
  vars:
    aci_login: &aci_login
      host: '{{ ansible_host }}'
      user: '{{ ansible_user }}'
      password: '{{ ansible_password }}'
      validate_certs: "{{ validate_certs }}"

  tasks:
    - name: Add a new VLAN pool
      cisco.aci.aci_vlan_pool:
        <<: *aci_login
        pool: "{{ item.name }}"
        pool_allocation_mode: "{{ item.alloc_mode }}"
        description: "{{ item.description if item.description is defined else omit}}"
        state:  "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ vlan_pool }}"
      when: vlan_pool is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets vlan_pool --automation_type {{ automation_type }}
      delegate_to: localhost
      when: vlan_pool is defined and diff_mode_enabled == true

    - name: Add a new VLAN encap block
      cisco.aci.aci_vlan_pool_encap_block:
        <<: *aci_login
        pool: "{{ item.vlan_pool }}"
        pool_allocation_mode: "{{ item.poolAllocMode }}"
        allocation_mode: "{{ item.alloc_mode }}"
        block_start: "{{ item.start_vlan | int }}"
        block_end: "{{ item.stop_vlan | int }}"
        block_name: "{{'blk_%s_%s' %(item.start_vlan | int , item.stop_vlan | int ) }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ vlan_encap_block }}"
      when: vlan_encap_block is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets vlan_encap_block --automation_type {{ automation_type }}
      delegate_to: localhost
      when: vlan_encap_block is defined and diff_mode_enabled == true

    - name: Add a new Domain (physical and external routed)
      cisco.aci.aci_domain:
        <<: *aci_login
        domain: "{{ item.name }}"
        domain_type: "{{ item.type }}"
        state: "{{ item.status }}"
        vm_provider: "{{ item.vm_provider if item.vm_provider is defined and item.vm_provider != '' and item.type == 'vmm' else omit}}"
      delegate_to: localhost
      loop: "{{ domain }}"
      when: domain is defined

    - name: Bind a domain to VLAN pool (physical and external routed)
      cisco.aci.aci_domain_to_vlan_pool:
        <<: *aci_login
        domain: "{{ item.name }}"
        domain_type: "{{ item.type }}"
        state: "{{ item.status }}"
        pool: "{{ item.vlan_pool}}"
        pool_allocation_mode: "{{ 'dynamic' if item.type == 'vmm' else 'static'}}"
        vm_provider: "{{ item.vm_provider if item.vm_provider is defined and item.vm_provider != '' and item.type == 'vmm' else omit}}"
      delegate_to: localhost
      loop: "{{ domain }}"
      when: domain is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets domain --automation_type {{ automation_type }}
      delegate_to: localhost
      when: domain is defined and diff_mode_enabled == true

    - name: Add a new AEP
      cisco.aci.aci_aep:
        <<: *aci_login
        aep: "{{ item.name }}"
        description: "{{ item.description if item.description is defined and item.description else omit }}"
        infra_vlan:  "{{ item.enable_infra_vlan }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ aaep }}"
      when: aaep is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets aaep --automation_type {{ automation_type }}
      delegate_to: localhost
      when: aaep is defined and diff_mode_enabled == true

    - name: Add AEP to domain binding (physical and external routed)
      cisco.aci.aci_aep_to_domain:
        <<: *aci_login
        aep: "{{ item.aaep_name }}"
        domain: "{{ item.domain_name }}"
        domain_type: "{{ item.domain_type }}"
        state: "{{ item.status }}"
        vm_provider: "{{ item.vm_provider if item.vm_provider is defined and item.vm_provider != '' and item.domain_type == 'vmm' else omit}}"
      delegate_to: localhost
      loop: "{{ aaep_domain_association }}"
      when: aaep_domain_association is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets aaep_domain_association --automation_type {{ automation_type }}
      delegate_to: localhost
      when: aaep_domain_association is defined and diff_mode_enabled == true

    - name: Create CDP Interface Policy to enable CDP
      cisco.aci.aci_interface_policy_cdp:
        <<: *aci_login
        name: "{{ item.name }}"
        admin_state: "{{'yes' if item.cdp_state == 'enabled' else 'no' }}"
        state: "{{ item.status }}"
        description: "{{ item.description if item.description is defined else omit}}"
      delegate_to: localhost
      loop: "{{ intpol_cdp }}"
      when: intpol_cdp is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_cdp --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_cdp is defined and diff_mode_enabled == true

    - name: Add a Layer 2 interface policy
      cisco.aci.aci_interface_policy_l2:
        <<: *aci_login
        l2_policy: "{{ item.name }}"
        qinq: "{{ item.qinq }}"
        vlan_scope: '{{ item.vlan_scope }}'
        description: "{{ item.description if item.description is defined else omit}}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ intpol_l2 }}"
      when: intpol_l2 is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_l2 --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_l2 is defined and diff_mode_enabled == true

    - name: Add a Link Level Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
            <polUni>
                <infraInfra>
                    <fabricHIfPol annotation="orchestrator:ansible" autoNeg="{{ item.autoneg | default('on',True) }}" descr="{{ item.description | default ('',True) }}" dfeDelayMs="{{ item.dfe_delay | int | default(0,True) }}" emiRetrain="disable" fecMode="{{ item.fec_mode | default ('inherit',True) }}" linkDebounce="{{ item.debounce | int | default (100,True) }}" name="{{ item.name }}" portPhyMediaType="auto" speed="{{ item.speed | default ('auto',True)}}"/>
                </infraInfra>
            </polUni>
      delegate_to: localhost
      loop: "{{ intpol_link }}"
      when: intpol_link is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_link --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_link is defined and diff_mode_enabled == true

    - name: Add a LLDP interface policy
      cisco.aci.aci_interface_policy_lldp:
        <<: *aci_login
        lldp_policy: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        receive_state: "{{ 'yes' if item.lldp_receive == 'enabled' else 'no' }}"
        transmit_state: "{{ 'yes' if item.lldp_transmit == 'enabled' else 'no' }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ intpol_lldp }}"
      when: intpol_lldp is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_lldp --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_lldp is defined and diff_mode_enabled == true

    - name: Add a MCP interface policy
      cisco.aci.aci_interface_policy_mcp:
        <<: *aci_login
        mcp: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        admin_state: "{{ 'yes' if item.mcp_state == 'enabled' else 'no' }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ intpol_mcp }}"
      when: intpol_mcp is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_mcp --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_mcp is defined and diff_mode_enabled == true

    - name: Add a port channel interface policy
      cisco.aci.aci_interface_policy_port_channel:
        <<: *aci_login
        port_channel: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        min_links: "{{ item.min_links }}"
        max_links: "{{ item.max_links }}"
        mode: "{{ item.pc_mode }}"
        state: "{{ item.status }}"
        suspend_individual: "{{ item.suspend_individual }}"
        symmetric_hash: "{{ item.symmetrical_hash }}"
        graceful_convergence: "{{ item.gracefull_converge }}"
        fast_select: "{{ item.fast_select_hot_stdby }}"
      delegate_to: localhost
      loop: "{{ intpol_port_channel }}"
      when: intpol_port_channel is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_port_channel --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_port_channel is defined and diff_mode_enabled == true

    - name: Add Storm Control interface policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  {% if item['type'] == "percentage" %}
                  <stormctrlIfPol name="{{item['name']}}" type="all" rate="{{item['rate']}}" burstRate="{{item['max_burst']}}" />
                  {% endif %}
                  {% if item['type'] == "packets_per_second" %}
                  <stormctrlIfPol name="{{item['name']}}" type="all" ratePps="{{item['rate']}}" burstPps="{{item['max_burst']}}" />
                  {% endif %}
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ intpol_storm }}"
      when: intpol_storm is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_storm --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_storm is defined and diff_mode_enabled == true

    - name: Add Spanning Tree interface policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <stpIfPol name="{{item['name']}}" descr="{{item['description']}}" ctrl="{{item['stp_control']}}" />
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ intpol_stp }}"
      when: intpol_stp is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets intpol_stp --automation_type {{ automation_type }}
      delegate_to: localhost
      when: intpol_stp is defined and diff_mode_enabled == true

    - name: Create a Leaf Interface Policy Group
      cisco.aci.aci_interface_policy_leaf_policy_group:
        <<: *aci_login
        policy_group: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        lag_type: "{{ 'leaf' if item.interface_policy_group_type == 'Access' else 'link' if item.interface_policy_group_type == 'PC' else 'node' if item.interface_policy_group_type == 'vPC' }}"
        link_level_policy: "{{ item.link_pol if item.link_pol is defined else omit }}"
        cdp_policy: "{{ item.cdp_pol if item.cdp_pol is defined else omit  }}"
        mcp_policy: "{{ item.mcp_pol if item.mcp_pol is defined else omit }}"
        lldp_policy: "{{ item.lldp_pol if item.lldp_pol is defined else omit  }}"
        stp_interface_policy: "{{ item.stp_pol if item.stp_pol is defined else omit  }}"
        port_channel_policy: "{{ item.lacp_pol if item.lacp_pol is  defined and item.interface_policy_group_type != 'Access' else omit }}"
        storm_control_interface_policy: "{{ item.storm_pol if item.storm_pol is defined else omit }}"
        l2_interface_policy: "{{ item.l2_int_pol if item.l2_int_pol is defined else omit }}"
        aep: "{{ item.aaep if item.aaep is defined else omit }}"
        ingress_data_plane_policing_policy: "{{ item.ingress_data_plane_policing_policy if item.ingress_data_plane_policing_policy is defined and item.ingress_data_plane_policing_policy != '' else omit }}"
        egress_data_plane_policing_policy: "{{ item.egress_data_plane_policing_policy if item.egress_data_plane_policing_policy is defined and item.egress_data_plane_policing_policy != '' else omit }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      with_items: "{{ interface_policy_group }}"
      when: interface_policy_group is defined and item.switch_type == 'leaf'

    - name: Create a Spine Interface Policy Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
          		<infraFuncP>
                    <infraSpAccPortGrp descr="{{item['description']}}"  name="{{item['name']}}" >
                    	<infraRsHIfPol tnFabricHIfPolName="{{item['link_pol']}}"/>
                    	<infraRsCdpIfPol tnCdpIfPolName="{{item['cdp_pol']}}"/>
                    	<infraRsAttEntP tDn="uni/infra/attentp-{{item['aaep']}}"/>
                    </infraSpAccPortGrp>
                 </infraFuncP>
          	  </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ interface_policy_group }}"
      when: interface_policy_group is defined and item.switch_type == 'spine'

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interface_policy_group --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interface_policy_group is defined and diff_mode_enabled == true

    - name: Add a new Leaf interface profile
      cisco.aci.aci_interface_policy_leaf_profile:
        <<: *aci_login
        interface_profile: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        state: "{{ item.status }}"
      delegate_to: localhost
      with_items: "{{ interface_profile }}"
      when: interface_profile is defined and item.profile_type == 'leaf'

    - name: Add a new a Spine interface profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <infraSpAccPortP descr="{{item['description']}}" name="{{item['name']}}" >
                  </infraSpAccPortP>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ interface_profile }}"
      when: interface_profile is defined and item.profile_type == 'spine'

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interface_profile --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interface_profile is defined and diff_mode_enabled == true

    - name: Associating an Leaf interface selector profile to a switch policy leaf profile
      cisco.aci.aci_interface_selector_to_switch_policy_leaf_profile:
        <<: *aci_login
        leaf_profile: "{{ item.switch_profile }}"
        interface_selector: "{{ item.interface_profile }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      with_items: "{{ associate_switchprof_intprof }}"
      when: associate_switchprof_intprof is defined and item.switch_profile_type == 'leaf'

    - name: Associating an Spine interface selector profile to a switch policy leaf profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <infraSpineP name="{{item['switch_profile']}}" status="modified" >
                    <infraRsSpAccPortP tDn="uni/infra/spaccportprof-{{item['interface_profile']}}"/>
                  </infraSpineP>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ associate_switchprof_intprof }}"
      when: associate_switchprof_intprof is defined and item.switch_profile_type == 'spine'

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets associate_switchprof_intprof --automation_type {{ automation_type }}
      delegate_to: localhost
      when: associate_switchprof_intprof is defined and diff_mode_enabled == true

    - name: Create an Interface Access Port Selector to an Interface Policy Leaf Profile with a Policy Group
      cisco.aci.aci_access_port_to_interface_policy_leaf_profile:
        <<: *aci_login
        interface_profile: "{{ item.interface_profile }}"
        access_port_selector: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        policy_group: "{{ item.interface_policy_group }}"
        interface_type: "{{ 'vpc' if item.interface_polgroup_type == 'vPC' else 'port_channel' if item.interface_polgroup_type == 'PC' else 'switch_port' if item.interface_polgroup_type == 'Access' }}"
        type: "{{ item.interface_profile_type }}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ interface_selector }}"
      when: interface_selector is defined and item.interface_profile_type == 'leaf'

    - name: Associate an access port block (single port) to an interface selector
      cisco.aci.aci_access_port_block_to_access_port:
        <<: *aci_login
        interface_profile: "{{ item.interface_profile }}"
        access_port_selector: "{{ item.name }}"
        port_blk: "{{ 'blk_%s_%s_%s_%s' %(item.from_port | int, item.from_port | int, item.to_port | int, item.to_port | int) }}"
        from_port: "{{ item.from_port | int}}"
        to_port: "{{ item.to_port | int }}"
        from_card: "{{ item.from_slot | int }}"
        to_card: "{{ item.to_slot | int }}"
        port_blk_description: "{{ item.port_block_description if item.port_block_description is defined else omit}}"
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ interface_selector }}"
      when: interface_selector is defined and item.interface_profile_type == 'leaf'

    - name: Spine Interface Selector
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <infraSpAccPortP name="{{item['interface_profile']}}" status="modified" >
                      <infraSHPortS descr="{{item['description']}}" name="{{item['name']}}" type="range" >
                        <infraPortBlk descr="{{item['port_block_description']}}" fromCard="{{item['from_slot'] | int }}" fromPort="{{item['from_port'] | int }}" name="Block{{item['from_slot'] |int }}{{item['to_slot'] | int }}{{item['from_port'] | int }}{{item['to_port'] |int }}" toCard="{{item['from_slot'] | int }}" toPort="{{item['from_port'] | int }}" />
                          {# Can Preconfigure InterfaceSelector without assigning Policy-Group #}
                          {% if item['interface_policy_group'] != "" %}
                              <infraRsSpAccGrp tDn="uni/infra/funcprof/spaccportgrp-{{item['interface_policy_group']}}" />
                          {% endif %}
                      </infraSHPortS>
                  </infraSpAccPortP>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      loop: "{{ interface_selector }}"
      when: interface_selector is defined and item.interface_profile_type == 'spine'

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interface_selector --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interface_selector is defined and diff_mode_enabled == true

    - name: Error Disabled Recovery Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <edrErrDisRecoverPol name="default" errDisRecovIntvl="{{item['errdis_recovery_interval']|default(300,True)}}">
                      <edrEventP event="event-ep-move" recover="{{item['recover_events_endpoint_move']|default('no',True)}}"/>
                      <edrEventP event="event-bpduguard" recover="{{item['recover_events_endpoint_bpduguard']|default('no',True)}}"/>
                      <edrEventP event="event-mcp-loop" recover="{{item['recover_events_mcp_loop']|default('no',True)}}"/>
                  </edrErrDisRecoverPol>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ err_disabled_recovery_policy }}"
      when: err_disabled_recovery_policy is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets err_disabled_recovery_policy --automation_type {{ automation_type }}
      delegate_to: localhost
      when: err_disabled_recovery_policy is defined and diff_mode_enabled == true

    - name: MCP Instance Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <mcpInstPol name="default" adminSt="{{item['admin_state']}}" ctrl="{{item['control']}}" key="{{item['mcp_key']}}" loopDetectMult="{{item['loop_detect_mult_factor']|default(3,True)}}" loopProtectAct="{{item['loop_protection_action']|default('port-disable',True)}}" initDelayTime="{{item['initial_delay']|default(180,True)}}" txFreq="{{item['transmission_frequency']|default(2,True)}}"/>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ mcp_instance_policy }}"
      when: mcp_instance_policy is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets mcp_instance_policy --automation_type {{ automation_type }}
      delegate_to: localhost
      when: mcp_instance_policy is defined and diff_mode_enabled == true

    - name: Interface Description
      cisco.aci.aci_interface_description:
        <<: *aci_login
        pod_id: "{{ item.pod_id }}"
        node_id: "{{ item.node_id }}"
        node_type: "{{ item.role }}"
        interface: "{{ item.interface }}"
        fex_id: "{{ item.fex_id if item.fex_id is defined and item.fex_id != '' else omit }}"
        description: "{{ item.description }}"
      delegate_to: localhost
      loop: "{{ interface_description }}"
      when: interface_description is defined and item.interface.lower() != "mgmt0"

    - name: Interface Description - MGMT
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fvTenant name="mgmt" status="modified">
                  <mgmtMgmtP name="default" status="modified">
                      <mgmtOoB name="default" status="modified">
                          <mgmtRsOoBStNode  tDn="topology/pod-{{item.pod_id}}/node-{{item.node_id}}" descr="{{ item.description }}"/>
                      </mgmtOoB>
                  </mgmtMgmtP>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ interface_description }}"
      when: interface_description is defined and item.interface.lower() == "mgmt0"

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interface_description --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interface_description is defined and diff_mode_enabled == true

    - name: Add a new Fex interface profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
          	      <infraFexP annotation="" descr="" dn="uni/infra/fexprof-{{item['name']}}" name="{{item['name']}}" nameAlias="" ownerKey="" ownerTag="" userdom=":all:common:">
                      <infraFexBndlGrp annotation="" descr="" name="{{item['name']}}" nameAlias="" ownerKey="" ownerTag="" userdom=":all:common:">
                          <infraRsMonFexInfraPol annotation="" tnMonInfraPolName="" userdom="all"/>
                      </infraFexBndlGrp>
                  </infraFexP>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ fex_interface_profile }}"
      when: fex_interface_profile is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets fex_interface_profile --automation_type {{ automation_type }}
      delegate_to: localhost
      when: fex_interface_profile is defined and diff_mode_enabled == true

    - name: Associate an access port block (single port) to an FEX interface profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <infraAccPortP dn="uni/infra/accportprof-{{item['interface_profile']}}">
                      <infraHPortS annotation="" descr="" dn="uni/infra/accportprof-{{item['interface_profile']}}/hports-{{item['name']}}-typ-range" name="{{item['name']}}" nameAlias="" ownerKey="" ownerTag="" type="range" userdom=":all:common:">
                          <infraRsAccBaseGrp annotation="" fexId="{{item['fex_id'] | int }}" tDn="uni/infra/fexprof-{{item['fex_interface_profile']}}/fexbundle-{{item['fex_interface_profile']}}" userdom=":all:common:"/>
                          <infraPortBlk annotation="" descr="" fromCard="{{item['from_slot'] | int }}" fromPort="{{item['from_port'] | int }}" name="Block{{item['from_slot']}}{{item['to_slot']}}{{item['from_port']}}{{item['to_port']}}" nameAlias="" toCard="{{item['to_slot'] | int }}" toPort="{{item['to_port'] | int }}" userdom=":all:common:"/>
                      </infraHPortS>
                 </infraAccPortP>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ fex_uplinks }}"
      when: fex_uplinks is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets fex_uplinks --automation_type {{ automation_type }}
      delegate_to: localhost
      when: fex_uplinks is defined and diff_mode_enabled == true

    - name: Preserve 802.1P Class of Service
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  {% if item['dot1p_preserve'] == "yes" %}
                  <qosInstPol dn="uni/infra/qosinst-default" name="default" nameAlias="" ctrl="dot1p-preserve"/>
                  {% else %}
                  <qosInstPol dn="uni/infra/qosinst-default" name="default" nameAlias="" ctrl=""/>
                  {% endif %}
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ dot1p_preserve }}"
      when: dot1p_preserve is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets dot1p_preserve --automation_type {{ automation_type }}
      delegate_to: localhost
      when: dot1p_preserve is defined and diff_mode_enabled == true

    - name: Configure QoS Classes
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <infraInfra>
                  <qosInstPol name="default">
                      <qosClass admin="{{item['admin_state'] | default(disabled,true) }}" mtu="{{item['mtu'] | int | default(9216, true) }}" prio="{{item['qos_class']}}" userdom="all">
                          <qosBuffer min="{{item['minimum_buffers'] | int | default(0, true) }}"  userdom="all"/>
                          <qosCong afdQueueLength="0" algo="{{item['congestion_algorithm'] | default('tail-drop', true) }}"  annotation="" descr="" ecn="{{item['congestion_notification'] | default('disabled', true) }}" forwardNonEcn="{{item['forward_non_ecn_traffic'] | default('disabled', true) }}" wredMaxThreshold="{{item['wred_max_threshold'] | int | default(100, true) }}" wredMinThreshold="{{item['wred_min_threshold'] | int | default(0, true) }}" wredProbability="{{item['wred_probability'] | int | default(0, true) }}" wredWeight="{{item['wred_weight'] | int | default(0, true) }}"/>
                          {% if item['pfc_admin_state'] == "yes" %}
                    	  <qosPfcPol adminSt="yes" name="default" enableScope="{{item['pfc_scope'] | default('tor', true)}}" noDropCos="{{item['no_drop_cos'] | default('cos0', true)}}" />
                          {% else %}
                          <qosPfcPol adminSt="no" noDropCos="" name="default" enableScope="{{item['pfc_scope'] | default('tor', true)}}" />
                          {% endif %}
                          {% if item['scheduling_algorithm'] == "strict_priority" %}
                          <qosSched bw="0" descr="" meth="sp" />
                          {% else %}
                          <qosSched bw="{{item['bandwidth_allocated'] | int | default(0, true)}}" meth="wrr" />
                          {% endif %}
                      </qosClass>
                  </qosInstPol>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ qos_classes }}"
      when: qos_classes is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets qos_classes --automation_type {{ automation_type }}
      delegate_to: localhost
      when: qos_classes is defined and diff_mode_enabled == true

    - name: Add Access Data Plane Policing policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% if item['excessive_burst'] and item['excessive_burst'] != '' %}
            {% set excessive_burst =  item['excessive_burst'] | int %}
          {% else %} 
            {% set excessive_burst = "unspecified" %}
          {% endif %}
          {% if item['burst'] and item['burst'] != '' %}
            {% set burst =  item['burst'] | int %}
          {% else %} 
            {% set burst = "unspecified" %}
          {% endif %}
          <polUni>
              <infraInfra>
                  <qosDppPol adminSt="{{item['admin_status'] | default('disabled', true)}}" be="{{ excessive_burst }}" beUnit="{{item['excessive_burst_unit'] | default('unspecified', true)}}" burst="{{ burst }}" burstUnit="{{item['burst_unit'] | default('unspecified', true)}}" conformAction="{{item['conform_action'] | default('transmit', true)}}" conformMarkCos="{{item['conform_mark_cos'] | default('unspecified', true)}}" conformMarkDscp="{{item['conform_mark_dscp'] | default('unspecified', true)}}" dn="uni/infra/qosdpppol-{{item['name']}}" exceedAction="{{item['exceed_action'] | default('drop', true)}}" exceedMarkCos="{{item['exceed_mark_cos'] | default('unspecified', true)}}" exceedMarkDscp="{{item['exceed_mark_dscp'] | default('unspecified', true)}}" mode="{{item['bgp_domain_mode'] | default ('bit', true)}}" name="{{item['name']}}" pir="{{item['peak_rate'] | int }}" pirUnit="{{item['peak_rate_unit'] | default('unspecified', true)}}" rate="{{item['rate'] | int }}" rateUnit="{{item['rate_unit'] | default('unspecified', true)}}" sharingMode="{{item['sharing_mode'] | default ('dedicated', true)}}" type="{{item['type'] | default('1R2C', true)}}" violateAction="{{item['violate_action'] | default('drop', true)}}" violateMarkCos="{{item['violate_mark_cos'] | default('unspecified', true)}}" violateMarkDscp="{{item['violate_mark_dscp'] | default('unspecified', true)}}"/>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ access_dpp_policy }}"
      when: access_dpp_policy is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets access_dpp_policy --automation_type {{ automation_type }}
      delegate_to: localhost
      when: access_dpp_policy is defined and diff_mode_enabled == true

    - name: Add Access SPAN Destination Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% if item['dscp'] and item['dscp'] != '' %}
            {% set dscp =  item['dscp'] | int %}
          {% else %}
            {% set dscp = "unspecified" %}
          {% endif %}
          <polUni>
              <infraInfra>
                  <spanDestGrp descr="{{item['description']}}" dn="uni/infra/destgrp-{{item['name']}}" name="{{item['name']}}">
                      <spanDest dn="uni/infra/destgrp-{{item['name']}}/dest-{{item['name']}}" name="{{item['name']}}">
                          {% if item['destination_type'] == 'epg' %}
                          <spanRsDestEpg dn="uni/infra/destgrp-{{item['name']}}/dest-{{item['name']}}/rsdestEpg" dscp="{{ dscp }}" flowId="{{item['flow_id'] | int | default('1',true) }}" ip="{{item['destination_ip']}}" mtu="{{item['mtu'] | int | default('1518',true)}}" srcIpPrefix="{{item['source_ip']}}" tDn="uni/tn-{{item['destination_tenant']}}/ap-{{item['destination_anp']}}/epg-{{item['destination_epg']}}" ttl="{{item['ttl'] | int | default('64',true)}}" ver="{{item['span_version'] | default ('ver2', true)}}" verEnforced="{{item['enforce_span_version'] | default ('no', true)}}"/>
                          {% else %}
                          {% if item['path_type'] == 'port' %}
                          <spanRsDestPathEp dn="uni/infra/destgrp-{{item['name']}}/dest-{{item['name']}}/rsdestPathEp-[topology/pod-{{item['pod_id']}}/paths-{{item['node_id']}}/pathep-[eth{{item['interface']}}]]" mtu="{{item['mtu'] | int | default('1518',true)}}" tDn="topology/pod-{{item['pod_id']}}/paths-{{item['node_id']}}/pathep-[eth{{item['interface']}}]"/>
                          {% else %}
          	              <spanRsDestPathEp dn="uni/infra/destgrp-{{item['name']}}/dest-{{item['name']}}/rsdestPathEp-[topology/pod-{{item['pod_id']}}/paths-{{item['node_id']}}/pathep-[{{item['interface_policy']}}]]" mtu="{{item['mtu'] | int | default('1518',true)}}" tDn="topology/pod-{{item['pod_id']}}/paths-{{item['node_id']}}/pathep-[{{item['interface_policy']}}]"/>
                          {% endif %}
                          {% endif %}
                      </spanDest>
                  </spanDestGrp>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ access_span_destination }}"
      when: access_span_destination is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets access_span_destination --automation_type {{ automation_type }}
      delegate_to: localhost
      when: access_span_destination is defined and diff_mode_enabled == true

    - name: Add Access SPAN Source Group
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% if item['l3out_encap_vlan'] and item['l3out_encap_vlan'] != '' %}
            {% set l3out_encap_vlan = 'vlan-'+item['l3out_encap_vlan'] | int | string %}
          {% else %}
            {% set l3out_encap_vlan = "" %}
          {% endif %}
          <polUni>
              <infraInfra>
                  <spanSrcGrp adminSt="{{item['admin_status']}}" annotation="" descr="{{item['description']}}" dn="uni/infra/srcgrp-{{item['name']}}" name="{{item['name']}}">
                      <spanSpanLbl name="{{item['destination_group']}}"/>
                      <spanSrc descr="{{item['source_description']}}" dir="{{item['direction'] | default ('both',true)}}" name="{{item['source_name']}}" spanOnDrop="{{item['span_on_drop'] | default ('no',true)}}">
                          {% if item['type'] == 'epg' %}
                          <spanRsSrcToEpg tDn="uni/tn-{{item['source_tenant']}}/ap-{{item['source_anp']}}/epg-{{item['source_epg']}}"/>
          			      {% elif item['type'] == 'routed_outside' %}
          			      <spanRsSrcToL3extOut addr="0.0.0.0" encap="{{ l3out_encap_vlan }}" tDn="uni/tn-{{item['l3out_tenant']}}/out-{{item['l3out_name']}}"/>
                          {% endif %}
                          {% if item['source_path_type'] %}
                          {% if item['source_path_type'] == 'port' %}
                          <spanRsSrcToPathEp tDn="topology/pod-{{ item['pod_id'] }}/paths-{{ item['node_id'] }}/pathep-[{{ item['interface'] }}]"/>
                          {% else %}
                          <spanRsSrcToPathEp tDn="topology/pod-{{ item['pod_id'] }}/paths-{{ item['node_id'] }}/pathep-[{{ item['interface_policy'] }}]"/>
                          {% endif %}
                          {% endif %}
                      </spanSrc>
                  </spanSrcGrp>
              </infraInfra>
          </polUni>
      delegate_to: localhost
      with_items: "{{ access_span_source_group }}"
      when: access_span_source_group is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets access_span_source_group --automation_type {{ automation_type }}
      delegate_to: localhost
      when: access_span_source_group is defined and diff_mode_enabled == true

    - name: Configure interfaces using per-port configuration
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% set interface = item['interface'].split('/') %}
          {% if item['shutdown'] == '' %}
          {% set shutdown = 'no' %}
          {% else %}
          {% set shutdown = item['shutdown'] %}
          {% endif %}
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          <polUni>
              {% if item['port_type'] is defined and item['port_type'] == "fabric" %}
              <fabricInst>
              {% if item['node_type'] == "leaf" %}
                  <fabricPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int  }}" assocGrp="uni/fabric/funcprof/leportgrp-{{ item['interface_policy_group']}}" status="{{ status }}" description="{{ item['description'] }}"/>
              {% else %}
                  <fabricPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int }}" assocGrp="uni/fabric/funcprof/spportgrp-{{ item['interface_policy_group']}}" role="spine" status="{{ status }}" description="{{ item['description'] }}"/>
              {% endif %}
              </fabricInst>
              {% else %}
              <infraInfra>
                  {% if item['node_type'] == "leaf" %}
                  {% if item['brekout_interface'] %}
                  <infraPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int }}" brkoutMap="{{ item['brekout_interface'] }}"/>
                  {% elif item['connected_fex'] %}
                  <infraPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int  }}" connectedFex="{{ item['connected_fex'] | int }}"/>
                  {% elif item['interface_type_type'] | lower == "access" %}
                  {% if interface | length  == 2 %}
                  <infraPortConfig node="{{ item['node_id'] | int  }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int }}" description="{{ item['description'] }}" shutdown="{{ shutdown }}" assocGrp="uni/infra/funcprof/accportgrp-{{ item['interface_policy_group']}}"/>
                  {% else %}
                  <infraPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int }}" subPort="{{ interface[2] }}" description="{{ item['description'] }}" shutdown="{{ shutdown }}" assocGrp="uni/infra/funcprof/accportgrp-{{ item['interface_policy_group']}}"/>
                  {% endif %}
                  {% elif item['interface_type_type'] | lower == "pc" or item['interface_type_type'] | lower == "vpc"%}
                  {% if interface | length  == 2 %}
                  <infraPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int  }}" port="{{ interface[1] | int }}" description="{{ item['description'] }}" shutdown="{{ shutdown }}" assocGrp="uni/infra/funcprof/accbundle-{{ item['interface_policy_group']}}"/>
                  {% else %}
                  <infraPortConfig node="{{ item['node_id'] | int }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int }}" subPort="{{ interface[2] }}" description="{{ item['description'] }}" shutdown="{{ shutdown }}" assocGrp="uni/infra/funcprof/accbundle-{{ item['interface_policy_group']}}"/>
                  {% endif %}
                  {% endif %}
                  {% else %}
                  <infraPortConfig node="{{ item['node_id'] | int  }}" card="{{ interface[0] | int }}" port="{{ interface[1] | int }}" description="{{ item['description'] }}" shutdown="{{ shutdown }}" assocGrp="uni/infra/funcprof/spaccportgrp-{{ item['interface_policy_group']}}"/>
                  {% endif %}
              </infraInfra>
              {% endif %}
          </polUni>
      delegate_to: localhost
      loop: "{{ interface_configuration }}"
      when: interface_configuration is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interface_configuration --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interface_configuration is defined and diff_mode_enabled == true

    - name: Switch Configuration
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {# case leaf #}
          {% if item['node_type'] == "leaf" %}

          {% if item['access_policy_group'] == '' %}
          {% set access_policy_group = '' %}
          {% else %}
          {% set access_policy_group = "uni/infra/funcprof/accnodepgrp-"+item['access_policy_group'] %}
          {% endif %}

          {% if item['fabric_policy_group'] == '' %}
          {% set fabric_policy_group = '' %}
          {% else %}
          {% set fabric_policy_group = "uni/fabric/funcprof/lenodepgrp-"+item['fabric_policy_group'] %}
          {% endif %}

          {# case spine #}
          {% else %}
          {% if item['access_policy_group'] == '' %}
          {% set access_policy_group = '' %}
          {% else %}
          {% set access_policy_group = "uni/infra/funcprof/spaccnodepgrp-"+item['access_policy_group'] %}
          {% endif %}

          {% if item['fabric_policy_group'] == '' %}
          {% set fabric_policy_group = '' %}
          {% else %}
          {% set fabric_policy_group = "uni/fabric/funcprof/spnodepgrp-"+item['fabric_policy_group'] %}
          {% endif %}

          {% endif %}

          <polUni>
              <infraInfra>
                  <infraNodeConfig node="{{ item['node_id'] | int  }}" assocGrp="{{access_policy_group}}" />
              </infraInfra>
              <fabricInst>
                  <fabricNodeConfig node="{{ item['node_id'] | int  }}" assocGrp="{{fabric_policy_group}}" />
              </fabricInst>
          </polUni>
      delegate_to: localhost
      with_items: "{{ switch_configuration }}"
      when: switch_configuration is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets switch_configuration --automation_type {{ automation_type }}
      delegate_to: localhost
      when: switch_configuration is defined and diff_mode_enabled == true

    - name: Create an Fex Interface Access Port Selector to an Interface Policy Leaf Profile with a Policy Group
      cisco.aci.aci_access_port_to_interface_policy_leaf_profile:
        <<: *aci_login
        interface_profile: "{{ item.fex_interface_profile }}"
        access_port_selector: "{{ item.name }}"
        description: "{{ item.description if item.description is defined else omit}}"
        policy_group: "{{ item.interface_policy_group }}"
        fex_id: "{{ item.fex_id | int }}"
        interface_type: "{{ 'fex_vpc' if item.interface_polgroup_type == 'vPC' else 'fex_port_channel' if item.interface_polgroup_type == 'PC' else 'fex' if item.interface_polgroup_type == 'Access' }}"
        type: fex
        state: "{{ item.status }}"
      delegate_to: localhost
      loop: "{{ interface_selector_fex }}"
      when: interface_selector_fex is defined

    - name: Associate an Fex access port block (single port) to an interface selector
      cisco.aci.aci_access_port_block_to_access_port:
        <<: *aci_login
        interface_profile: "{{ item.fex_interface_profile }}"
        access_port_selector: "{{ item.name }}"
        port_blk: "{{ 'blk_%s_%s_%s_%s' %(item.from_port | int, item.from_port | int, item.to_port | int, item.to_port | int) }}"
        from_port: "{{ item.from_port | int}}"
        to_port: "{{ item.to_port | int }}"
        port_blk_description: "{{ item.port_block_description if item.port_block_description is defined else omit}}"
        state: "{{ item.status }}"
        type: fex
      delegate_to: localhost
      loop: "{{ interface_selector_fex }}"
      when: interface_selector_fex is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interface_selector_fex --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interface_selector_fex is defined and diff_mode_enabled == true