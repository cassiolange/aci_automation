---
- import_playbook: update.yml

- name : L3Out Provisioning
  gather_facts: false
  hosts: all
  vars_files:
   - "{{ aci_variable_filename }}"
  vars:
     - aci_login: &aci_login
          host: '{{ ansible_host }}'
          user: '{{ ansible_user }}'
          password: '{{ ansible_password }}'
          validate_certs: "{{ validate_certs }}"

  tasks:
    - name: BGP Address Family Context
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          {%- set ctrl="" %}
          {%- if item['host_route_leak'] == "yes" %}
          {% set ctrl="host-rt-leak" %}
          {% endif %}
          {%set local_max_ecmp = 0 %} 
          {% if item['local_max_ecmp'] is defined and item['local_max_ecmp'] != '' %}
          {%set local_max_ecmp = item['local_max_ecmp'] | int %} 
          {% endif %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
                  <bgpCtxAfPol name="{{item['name']}}" descr="{{item['description']}}" eDist="{{item['ebgp_distance']| int |default('20',True)}}" iDist="{{item['ibgp_distance']| int |default('200',True)}}" localDist="{{item['local_distance']| int |default('220',True)}}" maxEcmp="{{item['ebgp_max_ecmp']| int |default('16',True)}}" maxEcmpIbgp="{{item['ibgp_max_ecmp']| int |default('16',True)}}"  ctrl="{{ctrl}}" status="{{ status }}" annotation="orchestrator:ansible" maxLocalEcmp="{{ local_max_ecmp }}"/>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ bgp_address_family_context }}"
      when: bgp_address_family_context is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets bgp_address_family_context --automation_type {{ automation_type }}
      delegate_to: localhost
      when: bgp_address_family_context is defined and diff_mode_enabled == true

    - name: BGP Route Summarization Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          {# bgp control #}
          {% set ctrl_list = [] %}
          {% if item['as_set'] and item['as_set'] == 'yes' %}
                {{ ctrl_list.append('as-set') or ""}}
          {% endif %}
          {% if item['summary_only'] is defined and item['summary_only'] == 'yes' %}
                {{ ctrl_list.append('summary-only') or ""}}
          {% endif %}
          {% set ctrl = '' %}
          {% if ctrl_list %}
              {% set ctrl = ctrl_list | join(',') %}
          {% endif %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
                  <bgpRtSummPol addrTCtrl="af-ucast" annotation="orchestrator:ansible"  ctrl="{{ ctrl }}" descr="{{item['description']}}"  name="{{item['name']}}" status="{{status}}"/>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ bgp_route_summarization }}"
      when: bgp_route_summarization is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets bgp_route_summarization --automation_type {{ automation_type }}
      delegate_to: localhost
      when: bgp_route_summarization is defined and diff_mode_enabled == true

    - name: Add ospf interface policy
      cisco.aci.aci_interface_policy_ospf:
        <<: *aci_login
        tenant: "{{ item.tenant }}"
        ospf: "{{ item.name }}"
        state: "{{ item.status }}"
        description: "{{ item.description if item.description is defined and item.description else omit }}"
        dead_interval: "{{ item.dead_interval | int if item.dead_interval is defined and item.dead_interval else omit }}"
        hello_interval: "{{ item.hello_interval | int if item.hello_interval is defined and item.hello_interval else omit }}"
        retransmit_interval: "{{ item.retransmit_interval | int if item.retransmit_interval is defined and item.retransmit_interval else omit }}"
        transmit_delay: "{{ item.transmit_delay | int if item.transmit_delay is defined and item.transmit_delay else omit }}"
        cost: "{{ item.interface_cost | int if item.interface_cost is defined and item.interface_cost else omit }}"
        priority: "{{ item.priority | int if item.priority is defined and item.priority else omit }}"
        network_type: "{{ item.network_type }}"
        controls: "{{ ['passive' if item.passive_participation is defined and item.passive_participation == 'yes',  'bfd' if item.use_bfd is defined and item.use_bfd == 'yes', 'mtu-ignore' if item.mtu_ignore is defined and item.mtu_ignore == 'yes', 'advert-subnet' if item.advertise_subnet is defined and item.advertise_subnet == 'yes' ]  | reject('undefined') | join(',') | default(omit,true)}}"
      delegate_to: localhost
      loop: "{{ ospf_int_pol }}"
      when: ospf_int_pol is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets ospf_int_pol --automation_type {{ automation_type }}
      delegate_to: localhost
      when: ospf_int_pol is defined and diff_mode_enabled == true

    - name: BFD Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
          	<fvTenant name="{{item['tenant']}}" status="modified">
                  <bfdIfPol adminSt="enabled" annotation="" ctrl="" descr="" dn="uni/tn-{{item['tenant']}}/bfdIfPol-{{item['name']}}" echoAdminSt="enabled" echoRxIntvl="{{item['echo_receive']}}" minRxIntvl="{{item['minimum_receive']}}" minTxIntvl="{{item['minimum_transmit']}}" name="{{item['name']}}" detectMult="{{item['detection_multiplier']}}" nameAlias="" ownerKey="" ownerTag=""/>
            </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ bfd_policy }}"
      when: bfd_policy is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets bfd_policy --automation_type {{ automation_type }}
      delegate_to: localhost
      when: bfd_policy is defined and diff_mode_enabled == true

    - name: Add a new L3Out
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
          	<fvTenant name="{{item['tenant']}}" status="modified">
          	  <l3extOut descr="" enforceRtctrl="{{item['route_control_enforcement']|default('export',True)}}" name="{{item['name']}}" targetDscp="unspecified" annotation="orchestrator:ansible">
          		<l3extRsEctx tnFvCtxName="{{item['vrf']}}" />
          		<l3extRsL3DomAtt tDn="uni/l3dom-{{item['l3out_domain']}}" />
              {% if item['enable_pim'] == "yes" %}
              <pimExtP enabledAf="ipv4-mcast" name="pim"/>
              {% endif %}
          		{% if item['consumer_label'] and item['consumer_label'] != "" %}
              <l3extConsLbl descr="" name="{{item['consumer_label']}}" owner="infra" tag="yellow-green" />
              {% endif %}
              {% if item['provider_label'] and item['provider_label'] != "" %}
              <l3extProvLbl descr="" name="{{item['provider_label']}}" tag="yellow-green" />
              {% endif %}
              {% if item['enable_ospf'] == "yes" %}
              <ospfExtP areaCost="{{item['ospf_area_cost']| int |default('1',True)}}" areaCtrl="redistribute,summary" areaId="{{item['ospf_area_id']}}" areaType="{{item['ospf_area_type']}}"  />
              {% endif %}
              {% if item['enable_bgp'] == "yes" %}
              <bgpExtP />
              {% endif %}
          	  </l3extOut>
          	</fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ l3out }}"
      when: l3out is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets l3out --automation_type {{ automation_type }}
      delegate_to: localhost
      when: l3out is defined and diff_mode_enabled == true

    - name: L3Out Route Profile for Redistribution
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
                  <l3extOut name="{{item['l3out']}}" status="modified">
                      <l3extRsRedistributePol  src="{{item['source']}}" tnRtctrlProfileName="{{item['route_map']}}" status="{{ status }}"/>
                  </l3extOut>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ l3out_route_prof_redistribution }}"
      when: l3out_route_prof_redistribution is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets l3out_route_prof_redistribution --automation_type {{ automation_type }}
      delegate_to: localhost
      when: l3out_route_prof_redistribution is defined and diff_mode_enabled == true

    - name: Add a new L3Out Node profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% if item['enable_mpod'] == "yes" %}
          	{% set fabricExtCtrlPeering %}yes{% endset %}
          {% else %}
          	{% set fabricExtCtrlPeering %}no{% endset %}
          {% endif %}
          <polUni>
          	<fvTenant name="{{item['tenant']}}" status="modified">
          	 <l3extOut name="{{item['l3out']}}" status="modified">
          	  <l3extLNodeP descr="" name="{{item['name']}}" tag="yellow-green" targetDscp="unspecified" annotation="orchestrator:ansible" >
                  <l3extRsNodeL3OutAtt rtrId="{{item['router_id']}}" rtrIdLoopBack="{{item['router_id_as_loopback']}}" tDn="topology/pod-{{item['pod_id'] | int }}/node-{{item['node_id'] | int }}" >
          			{% if item['router_id_as_loopback'] == "no" and item['loopback_ip'] != "" %}
          			<l3extLoopBackIfP addr="{{item['loopback_ip']}}" />
          			{% endif %}
          			<l3extInfraNodeP fabricExtCtrlPeering="{{fabricExtCtrlPeering}}" fabricExtIntersiteCtrlPeering="no" />
          		</l3extRsNodeL3OutAtt>
          	  </l3extLNodeP>
          	 </l3extOut>
          	</fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ l3out_node_profile }}"
      when: l3out_node_profile is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets l3out_node_profile --automation_type {{ automation_type }}
      delegate_to: localhost
      when: l3out_node_profile is defined and diff_mode_enabled == true

    - name: Add an L3Out Interface Profile
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
              <fvTenant name="{{item['tenant']}}" >
                  <l3extOut name="{{item['l3out']}}">
                      <l3extLNodeP name="{{item['l3out_node_profile']}}">
                          <l3extLIfP annotation="orchestrator:ansible" descr="{{item['description']}}" name="{{item['name']}}" prio="{{item['qos_priority'] | default('unspecified',True)}}">
                          <l3extRsLIfPCustQosPol tnQosCustomPolName="{{item['custom_qos']}}"/>
                          <l3extRsIngressQosDppPol tnQosDppPolName="{{item['ingress_dpp_policy']}}"/>
                          <l3extRsEgressQosDppPol tnQosDppPolName="{{item['egress_dpp_policy']}}"/>
                          </l3extLIfP>
                      </l3extLNodeP>
                  </l3extOut>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ l3out_int_profile }}"
      when: l3out_int_profile is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets l3out_int_profile --automation_type {{ automation_type }}
      delegate_to: localhost
      when: l3out_int_profile is defined and diff_mode_enabled == true

    - name: L3Out Interface
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
               <l3extOut name="{{item['l3out']}}" status="modified">
                  <l3extLNodeP name="{{item['l3out_node_profile']}}" status="modified">
                      <l3extLIfP descr="" name="{{item['name']}}" status="modified">
                              {% if item['use_bfd'] == 'yes' %}
                              <bfdIfP descr="" keyId="1" name="bfdIfPolicy" nameAlias="" type="none">
                                  {% if item['bfd_policy'] %}
                                  <bfdRsIfPol dn="uni/tn-{{item['tenant']}}/out-{{item['l3out']}}/lnodep-{{item['l3out_node_profile']}}/lifp-{{item['name']}}/bfdIfP/rsIfPol" tnBfdIfPolName="{{item['bfd_policy']}}" />
                                  {% else %}
                                  <bfdRsIfPol dn="uni/tn-{{item['tenant']}}/out-{{item['l3out']}}/lnodep-{{item['l3out_node_profile']}}/lifp-{{item['name']}}/bfdIfP/rsIfPol" tnBfdIfPolName="default" />
                                  {% endif %}
                              </bfdIfP>
                              {% endif %}
                              {% if item['ospf_interface_policy'] is defined and item['ospf_interface_policy'] != '' %}
                              {% if item['ospf_password'] is defined and item['ospf_password'] != '' %}
                              <ospfIfP name="ospfIfPolicy" authKeyId="1" authType="md5" authKey="{{item['ospf_password']}}">
                              {% else %}
                              <ospfIfP name="ospfIfPolicy" authKeyId="1" authType="none">
                              {% endif %}
                                  <ospfRsIfPol dn="uni/tn-{{item['tenant']}}/out-{{item['l3out']}}/lnodep-{{item['l3out_node_profile']}}/lifp-{{item['name']}}/ospfIfP/rsIfPol" tnOspfIfPolName="{{item['ospf_interface_policy']}}"/>
                              </ospfIfP>
                              {% endif %}
                              {% if item['interface_type'] == 'floating_svi' %}
                              <l3extVirtualLIfP annotation="orchestrator:ansible" addr="{{item['ip_addr_side_a']}}" autostate="{{item['autostate']}}" descr="{{item['description'] | default("")}}" encap="vlan-{{item['vlan_encap_id'] | int }}" mode="{{item['trunk_mode']}}" mtu="{{item['mtu'] | int }}" nodeDn="topology/pod-{{item['pod_id'] | int}}/node-{{item['left_node_id'] | int}}" ifInstT="ext-svi" status="{{ status }}">
                                  <l3extRsDynPathAtt encap="vlan-{{item['vlan_encap_id'] | int }}" floatingAddr="{{item['floating_primary_ip']}}"  tDn="uni/phys-{{item['floating_svi_domain']}}">
                                      <l3extVirtualLIfPLagPolAtt annotation=""/>
                                  </l3extRsDynPathAtt>
                              </l3extVirtualLIfP>
                              {% else %}
                              {% if item['path_type'] == 'vPC' %}
                                      {% set path %}topology/pod-{{item['pod_id'] | int }}/protpaths-{{item['left_node_id'] | int }}-{{item['right_node_id'] | int }}/pathep-{{item['int_pol_group']}}{% endset %}
                              <l3extRsPathL3OutAtt annotation="orchestrator:ansible" addr="0.0.0.0" descr="{{item['description'] | default("")}}" encap="vlan-{{item['vlan_encap_id'] | int }}" encapScope="local" ifInstT="ext-svi" autostate="{{item['autostate']}}" mode="{{item['trunk_mode']}}" mtu="{{item['mtu'] | int }}" tDn="{{path}}" targetDscp="unspecified" status="{{ status }}">
                                  <l3extMember addr="{{item['ip_addr_side_a']}}" descr=""  name="side_a" side="A" >
                                  {% if item['secondary_ip'] is defined and item['secondary_ip'] != '' %}
                                      <l3extIp addr="{{item['secondary_ip']}}" annotation="" descr="" name="" nameAlias=""/>
                                  {% endif %}
                                  </l3extMember>
                                  <l3extMember addr="{{item['ip_addr_side_b']}}" descr="" name="side_b" side="B" >
                                  {% if item['secondary_ip'] is defined and item['secondary_ip'] != '' %}
                                      <l3extIp addr="{{item['secondary_ip']}}" annotation="" descr="" name="" nameAlias=""/>
                                  {% endif %}
                                  </l3extMember>
                              </l3extRsPathL3OutAtt>
                              {% else %}
                                      {% if item['path_type'] == 'PC' %}
                                              {% set path %}topology/pod-{{item['pod_id'] | int }}/paths-{{item['left_node_id'] | int }}/pathep-[{{item['int_pol_group']}}]{% endset %}
                                      {% else %}
                                              {% set path %}topology/pod-{{item['pod_id'] | int }}/paths-{{item['left_node_id'] | int }}/pathep-[eth{{item['port_id']}}]{% endset %}
                                      {% endif %}
                                      {% if item['interface_type'] == 'svi' %}
                                              {% set iftype = "ext-svi" %}
                                              {% set encap %}vlan-{{item['vlan_encap_id']}}{% endset %}
                                      {% elif item['interface_type'] == 'routed_sub' %}
                                              {% set iftype ="sub-interface" %}
                                              {% set encap %}vlan-{{item['vlan_encap_id']}}{% endset %}
                                      {% else %}
                                              {% set iftype ="l3-port" %}
                                              {% set encap = "unknown" %}
                                      {% endif %}
                              <l3extRsPathL3OutAtt annotation="orchestrator:ansible" addr="{{item['ip_addr_side_a']}}" descr="{{item['description'] | default("")}}" encap="{{encap}}" encapScope="local" ifInstT="{{iftype}}" autostate="{{item['autostate']}}" mode="{{item['trunk_mode']}}" mtu="{{item['mtu'] | int }}" tDn="{{path}}" targetDscp="unspecified" status="{{ status }}">
                              {% if item['secondary_ip'] is defined and item['secondary_ip'] != '' %}
                                  <l3extIp addr="{{item['secondary_ip']}}" annotation="" descr="" name="" nameAlias=""/>
                              {% endif %}
                              </l3extRsPathL3OutAtt>
                              {% endif %}
                              {% endif %}
                          </l3extLIfP>
                      </l3extLNodeP>
                  </l3extOut>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ l3out_interfaces }}"
      when: l3out_interfaces is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets l3out_interfaces --automation_type {{ automation_type }}
      delegate_to: localhost
      when: l3out_interfaces is defined and diff_mode_enabled == true

    - name: Add a new ExtEpg
      cisco.aci.aci_l3out_extepg:
        <<: *aci_login
        tenant: "{{ item.tenant }}"
        l3out: "{{ item.l3_out }}"
        name: "{{ item.name }}"
        description: "{{ item.description if item.description else omit}}"
        state: "{{ item.status if item.status is defined else omit }}"
        dscp: "{{ item.dscp if item.dscp is defined and item.dscp !='' else omit }}"
        preferred_group: "{{ item.preferred_group if item.preferred_group is defined and item.preferred_group !='' else omit }}"
      delegate_to: localhost
      loop: "{{ external_epg }}"
      when: external_epg is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets external_epg --automation_type {{ automation_type }}
      delegate_to: localhost
      when: external_epg is defined and diff_mode_enabled == true

    - name: Add a new External Subnet
      cisco.aci.aci_l3out_extsubnet:
        <<: *aci_login
        tenant: "{{ item.tenant }}"
        l3out: "{{ item.l3_out }}"
        extepg: "{{ item.external_epg }}"
        description: "{{ item.description if item.description is defined else omit}}"
        network: "{{ item.external_subnet }}"
        scope: "{{ ['import-security' if item.external_subnet_for_external_epg is defined and item.external_subnet_for_external_epg == 'yes', 'export-rtctrl' if item.export_route_control is defined and item.export_route_control == 'yes', 'shared-rtctrl' if item.shared_route_control is defined and item.shared_route_control == 'yes', 'import-rtctrl' if item.import_route_control is defined and item.import_route_control == 'yes', 'shared-security' if item.shared_security is defined and item.shared_security == 'yes'] | reject('undefined') | join(',') | default('import-security',true)}}"
        state: "{{ item.status if item.status is defined else omit }}"
      delegate_to: localhost
      loop: "{{ external_epg_subnet }}"
      when: external_epg_subnet is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets external_epg_subnet --automation_type {{ automation_type }}
      delegate_to: localhost
      when: external_epg_subnet is defined and diff_mode_enabled == true

    - name: Create BGP Peer Prefix Policy
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% if item['maximum_number_of_prefixes'] is defined and item['maximum_number_of_prefixes'] != '' %}
              {% set maximum_prefixes = item['maximum_number_of_prefixes'] | int  %}
          {% else %}
              {% set maximum_prefixes = 20000 %}
          {% endif %}
          {% if item['threshold_percentage'] is defined and item['threshold_percentage'] != '' %}
              {% set threshold_percentage = item['threshold_percentage'] | int  %}
          {% else %}
              {% set threshold_percentage = 75 %}
          {% endif %}
          {% if item['action'] == 'restart' %}
          {% if item['restart_time_minutes'] is defined and item['restart_time_minutes'] != '' %}
              {% set restart_time_minutes = item['restart_time_minutes'] | int  %}
          {% else %}
              {% set restart_time_minutes = 1 %}
          {% endif %}
          {% else %}
              {% set restart_time_minutes = 'infinite' %}
          {% endif %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
                  <bgpPeerPfxPol action="{{ item['action'] }}" annotation="orchestrator:ansible" descr="{{ item['description'] }}" maxPfx="{{ maximum_prefixes }}" name="{{ item['name'] }}" restartTime="{{ restart_time_minutes }}" thresh="{{ threshold_percentage }}"/>
              </fvTenant>
          </polUni>

      delegate_to: localhost
      loop: "{{ bgp_peer_prefix_policy }}"
      when: bgp_peer_prefix_policy is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets bgp_peer_prefix_policy --automation_type {{ automation_type }}
      delegate_to: localhost
      when: bgp_peer_prefix_policy is defined and diff_mode_enabled == true

    - name: Set Rules
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
                  <rtctrlAttrP annotation="orchestrator:ansible" descr="{{item['description']}}" name="{{item['name']}}" nameAlias="" status="{{ status }}">
                  {% if item['set_community'] == 'yes' %}
                      <rtctrlSetComm annotation="" community="regular:as2-nn2:{{item['community']}}" descr="" name="" nameAlias="" setCriteria="{{item['community_criteria']}}" type="community"/>
                  {% endif %}
                  {% if item['prepend'] == 'yes' %}
                      <rtctrlSetASPath annotation="" criteria="prepend" descr="" lastnum="0" name="" nameAlias="" type="as-path">
                      {% for i in range((item['number_prepend']) | int) %}
                          <rtctrlSetASPathASN annotation="" asn="{{item['as_prepend'] | int }}" descr="" name="" nameAlias="" order="{{i}}"/>
                      {% endfor %}
                      </rtctrlSetASPath>
                  {% endif %}
                  {% if item['prepend_last_as'] is defined and item['prepend_last_as'] != '' %}
                      <rtctrlSetASPath criteria="prepend-last-as" lastnum="{{ item['prepend_last_as'] | int }}" type="as-path"/>
                  {% endif %}
                  {% if item['set_ext_epg'] is defined and item['set_ext_epg'] != ''  %}
                      <rtctrlSetPolicyTag annotation="" descr="" name="" nameAlias="" type="policy-tag">
                          <rtctrlRsSetPolicyTagToInstP annotation="" tDn="uni/tn-{{item['tenant']}}/out-{{item['l3out']}}/instP-{{item['set_ext_epg']}}"/>
                      </rtctrlSetPolicyTag>
                  {% endif %}
                  {% if item['next_hop_propagation'] is defined and item['next_hop_propagation'] == 'yes'  %}
                      <rtctrlSetNhUnchanged annotation="" descr="" name="" nameAlias="" type="nh-unchanged"/>
                  {% endif %}
                  </rtctrlAttrP>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ set_rules }}"
      when: set_rules is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets set_rules --automation_type {{ automation_type }}
      delegate_to: localhost
      when: set_rules is defined and diff_mode_enabled == true

    - name: Match Rules
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          {%set le = 0 %} 
          {% if item['le'] is defined and item['le'] != '' %}
          {%set le = item['le'] | int %} 
          {% endif %}
          {%set ge = 0 %} 
          {% if item['ge'] is defined and item['ge'] != '' %}
          {%set ge = item['ge'] | int %} 
          {% endif %}
          <polUni>
            <fvTenant name="{{item['tenant']}}" status="modified">
              <rtctrlSubjP annotation="orchestrator:ansible" name="{{item['name']}}" status="{{ status }}">
              {% if item['prefix'] is defined and item['prefix'] != '' %}
                <rtctrlMatchRtDest aggregate="{{item['aggregate'] | default('no',true) }}" fromPfxLen="{{ ge }}" ip="{{item['prefix']}}"  toPfxLen="{{ le }}"/>
              {% endif %}
              {% if item['match_community_name'] is defined and item['match_community_name'] != '' %}
                <rtctrlMatchCommTerm annotation="" descr="" name="{{item['match_community_name']}}" nameAlias="">
                  <rtctrlMatchCommFactor annotation="" community="regular:as2-nn2:{{item['community']}}" descr="" name="" nameAlias="" scope="transitive"/>
                </rtctrlMatchCommTerm>
              {% endif %}
              </rtctrlSubjP>
            </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ match_rules }}"
      when: match_rules is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets match_rules --automation_type {{ automation_type }}
      delegate_to: localhost
      when: match_rules is defined and diff_mode_enabled == true

    - name: L3out Route Maps
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          <polUni>
            <fvTenant name="{{item['tenant']}}" status="modified">
              <l3extOut name="{{item['l3out']}}">
              {% if item['type'] == 'match_routing_policy_only' %}
                {% set route_map_type %}global{% endset %}
              {% elif item['type'] == 'match_prefix_and_routing_policy' %}
                {% set route_map_type %}combinable{% endset %}
              {% endif %}
                <rtctrlProfile annotation="" autoContinue="{{item['auto_continue']}}" descr="" dn="uni/tn-{{item['tenant']}}/out-{{item['l3out']}}/prof-{{item['name']}}" name="{{item['name']}}" nameAlias="" ownerKey="" ownerTag="" type="{{route_map_type}}">
                  <rtctrlCtxP action="{{item['action']}}" annotation="" descr="" name="{{item['context_name']}}" nameAlias="" order="{{item['order']}}">
                  {% if item['set_rule'] | length %}
                    <rtctrlScope annotation="" descr="" name="" nameAlias="">
                      <rtctrlRsScopeToAttrP annotation="" tnRtctrlAttrPName="{{item['set_rule']}}"/>
                    </rtctrlScope>
                  {% endif %}
                  {% if item['match_rule'] | length %}
                    <rtctrlRsCtxPToSubjP annotation="" tnRtctrlSubjPName="{{item['match_rule']}}"/>
                  {% endif %}
                  </rtctrlCtxP>
                </rtctrlProfile>
              </l3extOut>
            </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ l3out_route_maps }}"
      when: l3out_route_maps is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets l3out_route_maps --automation_type {{ automation_type }}
      delegate_to: localhost
      when: l3out_route_maps is defined and diff_mode_enabled == true

    - name: Route Maps
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% if item['auto_continue'] == "yes" %}
              {% set auto_continue = "yes" %}
          {% else %}
              {% set auto_continue = "no" %}
          {% endif %}
          {% if item['action'] == "permit" %}
              {% set action = "permit" %}
          {% else %}
              {% set action = "deny" %}
          {% endif %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
                  <rtctrlProfile annotation="orchestrator:ansible" autoContinue="{{auto_continue}}" descr="{{item['description'] | default('') }}" name="{{item['name']}}">
                      {% if item['context_name'] and item['context_name'] != '' %}
                      <rtctrlCtxP action="{{action}}" descr="{{item['description'] | default('') }}" name="{{item['context_name']}}" order="{{item['order'] | int | default('') }}">
                          {% if item['match_rule'] and item['match_rule'] != '' %}
                          <rtctrlRsCtxPToSubjP tnRtctrlSubjPName="{{item['match_rule']}}"/>
                          {% endif %}
                          {% if item['set_rule'] and item['set_rule'] != '' %}
                          <rtctrlScope name="" >
                              <rtctrlRsScopeToAttrP tnRtctrlAttrPName="{{item['set_rule']}}"/>
                          </rtctrlScope>
                          {% endif %} 
                      </rtctrlCtxP>
                      {% endif %} 
                  </rtctrlProfile>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ route_maps }}"
      when: route_maps is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets route_maps --automation_type {{ automation_type }}
      delegate_to: localhost
      when: route_maps is defined and diff_mode_enabled == true

    - name: Interface BGP Peers
      cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni.xml
        method: post
        content: |
          {% import "macros/functions.j2" as functions %}
          {% set status = functions.status(item['status']) %}
          {# bfd and disable_connected_check #}
          {% set peerCtrl_list = [] %}
          {% if item['use_bfd'] is defined and item['use_bfd'] == 'yes' %}
                {{ peerCtrl_list.append('bfd') or ""}}
          {% endif %}
          {% if item['disable_connected_check'] is defined and item['disable_connected_check'] == 'yes' %}
                {{ peerCtrl_list.append('dis-conn-check') or ""}}
          {% endif %}
          {% set peerCtrl = '' %}
          {% if peerCtrl_list %}
              {% set peerCtrl = peerCtrl_list | join(',') %}
          {% endif %}
          {# bgp control #}
          {% set ctrl_list = [] %}
          {% if item['Allow_Self_AS'] and item['Allow_Self_AS'] == 'yes' %}
                {{ ctrl_list.append('allow-self-as') or ""}}
          {% endif %}
          {% if item['as_override'] is defined and item['as_override'] == 'yes' %}
                {{ ctrl_list.append('as-override') or ""}}
          {% endif %}
          {% if item['disable_peer_as_check'] is defined and item['disable_peer_as_check'] == 'yes' %}
                {{ ctrl_list.append('dis-peer-as-check') or ""}}
          {% endif %}
          {% if item['next_hop_self'] is defined and item['next_hop_self'] == 'yes' %}
                {{ ctrl_list.append('nh-self') or ""}}
          {% endif %}
          {% if item['send_community'] is defined and item['send_community'] == 'yes' %}
                {{ ctrl_list.append('send-com') or ""}}
          {% endif %}
          {% if item['send_extended_community'] is defined and item['send_extended_community']  == 'yes' %}
                {{ ctrl_list.append('send-ext-com') or ""}}
          {% endif %}
          {% set ctrl = '' %}
          {% if ctrl_list %}
              {% set ctrl = ctrl_list | join(',') %}
          {% endif %}
          {% if item['path_type'] == 'vPC' %}
                  {% set path %}topology/pod-{{item['pod_id'] | int }}/protpaths-{{item['left_node_id'] | int }}-{{item['right_node_id'] | int }}/pathep-{{item['int_pol_group']}}{% endset %}
          {% elif item['path_type'] == 'PC' %}
                  {% set path %}topology/pod-{{item['pod_id'] | int }}/paths-{{item['left_node_id'] | int }}/pathep-[{{item['int_pol_group']}}]{% endset %}
          {% else %}
                  {% set path %}topology/pod-{{item['pod_id'] | int }}/paths-{{item['left_node_id'] | int }}/pathep-[eth{{item['port_id'] }}]{% endset %}
          {% endif %}
          {% if item['private_as_control'] == 'remove_private_as' %}
                  {% set private_as %}remove-exclusive{% endset %}
          {% elif item['private_as_control'] == 'remove_all_private_as' %}
                  {% set private_as %}remove-exclusive,remove-all{% endset %}
          {% elif item['private_as_control'] == 'replace_private_as_with_local_as' %}
                  {% set private_as %}remove-exclusive,remove-all,replace-as{% endset %}
          {% else %}
                  {% set private_as %}{% endset %}
          {% endif %}
          {% if item['address_type_controls'] is defined and item['address_type_controls'] != '' %}
              {% set address_family = item['address_type_controls'] %}
          {% else %}
              {% set address_family = 'af-ucast' %}
          {% endif %}
          {% if item['send_domain_path'] is defined and item['send_domain_path'] != '' %}
              {% set ctrlext = 'send-domain-path' %}
          {% else %}
              {% set ctrlext = '' %}
          {% endif %}
          {% if item['ebgp_multihop_ttl'] is defined and item['ebgp_multihop_ttl'] != '' %}
              {% set ttl = item['ebgp_multihop_ttl'] | int  %}
          {% else %}
              {% set ttl = 1 %}
          {% endif %}
          {% if item['weight'] is defined and item['weight'] != '' %}
              {% set weight = item['weight'] | int  %}
          {% else %}
              {% set weight = 0 %}
          {% endif %}
          {% if item['admin_status'] is defined and item['admin_status'] != '' %}
              {% set admin_status = item['admin_status'] %}
          {% else %}
              {% set admin_status = 'enabled' %}
          {% endif %}
          {% if item['allow_self_as_count'] is defined and item['allow_self_as_count'] != '' %}
              {% set allow_self_as_count = item['allow_self_as_count'] | int  %}
          {% else %}
              {% set allow_self_as_count = 3 %}
          {% endif %}
          <polUni>
              <fvTenant name="{{item['tenant']}}" status="modified">
               <l3extOut name="{{item['l3out']}}" status="modified">
                  <l3extLNodeP name="{{item['l3out_node_profile']}}" status="modified">
                      <l3extLIfP descr="" name="{{item['name']}}" status="modified">
                              {% if item['interface_type'] is defined and item['interface_type'] == 'floating_svi' %}
                              <l3extVirtualLIfP nodeDn="topology/pod-{{item['pod_id'] | int }}/node-{{item['left_node_id'] | int }}" encap="vlan-{{ item['vlan_encap_id'] | int  }}" status="modified">
                              {% else %}
                              <l3extRsPathL3OutAtt tDn="{{path}}">
                              {% endif %}
                              {% if item['password'] %}
                                  <bgpPeerP annotation="orchestrator:ansible" addr="{{item['bgp_peer_ip']}}" ctrl="{{ctrl}}" ctrlExt="{{ctrlext}}" descr="{{item['bgp_peer_name']}}" name="peer-{{item['bgp_peer_ip']}}" peerCtrl="{{peerCtrl}}" privateASctrl="{{private_as}}" password="{{item['password']}}" addrTCtrl="{{address_family}}" ttl="{{ ttl }}" weight="{{ weight }}" adminSt="{{ admin_status }}" allowedSelfAsCnt="{{ allow_self_as_count }}" status="{{ status }}">
                              {% else %}
                                  <bgpPeerP annotation="orchestrator:ansible" addr="{{item['bgp_peer_ip']}}" ctrl="{{ctrl}}" ctrlExt="{{ctrlext}}" descr="{{item['bgp_peer_name']}}" name="peer-{{item['bgp_peer_ip']}}" privateASctrl="{{private_as}}" peerCtrl="{{peerCtrl}}" addrTCtrl="{{address_family}}" ttl="{{ ttl }}" weight="{{ weight }}" adminSt="{{ admin_status }}" allowedSelfAsCnt="{{ allow_self_as_count }}" status="{{ status }}">
                              {% endif %}
                                      {% if item['site_of_origin'] is defined and item['site_of_origin'] != '' %}
                                          <bgpSiteOfOriginP  soo="{{ item['site_of_origin'] }}" />
                                      {% endif %}
                                      {% if item['bgp_peer_prefix_policy'] is defined and item['bgp_peer_prefix_policy'] != '' %}
                                          <bgpRsPeerPfxPol tnBgpPeerPfxPolName="{{ item['bgp_peer_prefix_policy'] }}"/>
                                      {% endif %}
                                      {% if item['Import_Route_Map'] %}
                                          <bgpRsPeerToProfile annotation="" configIssues="" direction="import" tDn="uni/tn-{{item['tenant']}}/prof-{{item['Import_Route_Map']}}"/>
                                      {% endif %}
                                      {% if item['Export_Route_Map'] %}
                                          <bgpRsPeerToProfile annotation="" configIssues="" direction="export" tDn="uni/tn-{{item['tenant']}}/prof-{{item['Export_Route_Map']}}"/>
                                      {% endif %}
                                      {% if item['Local_AS'] %}
                                          {% set asnP = 'none' %}
                                          {% if item['Local_AS_Options'] == 'no-Prepend+replace-as' %}
                                              {% set asnP = 'replace-as' %}
                                          {% elif item['Local_AS_Options'] == 'no-Prepend+replace-as+dual-as' %}
                                              {% set asnP = 'dual-as' %}
                                          {% elif item['Local_AS_Options'] == 'no-prepend' %}
                                              {% set asnP = 'no-prepend' %}
                                          {% endif %}
                                          <bgpLocalAsnP annotation="" asnPropagate="{{asnP}}" descr="" localAsn="{{item['Local_AS'] | int }}" name="" nameAlias=""/>
                                      {% endif %}
                                      <bgpAsP asn="{{item['bgp_peer_as']}}" descr="" name="" nameAlias=""/>
                                  </bgpPeerP>
                              {% if item['interface_type'] is defined and item['interface_type'] == 'floating_svi' %}
                              </l3extVirtualLIfP>
                              {% else %}
                              </l3extRsPathL3OutAtt>
                              {% endif %}
                          </l3extLIfP>
                      </l3extLNodeP>
                  </l3extOut>
              </fvTenant>
          </polUni>
      delegate_to: localhost
      loop: "{{ interfaceBgpPeer }}"
      when: interfaceBgpPeer is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets interfaceBgpPeer --automation_type {{ automation_type }}
      delegate_to: localhost
      when: interfaceBgpPeer is defined and diff_mode_enabled == true

    - name: Create static routes
      cisco.aci.aci_l3out_static_routes:
        <<: *aci_login
        tenant: "{{ item.tenant }}"
        l3out: "{{ item.l3out }}"
        logical_node: "{{ item.l3out_node_profile }}"
        node_id: "{{ item.node_id | int }}"
        pod_id: "{{ item.pod_id | int }}"
        prefix: "{{ item.prefix }}"
        preference: "{{ item.admin_distance | int if item.admin_distance is defined and item.admin_distance != '' else omit }}"
        bfd: "{{ 'bfd' if item.route_control is defined and item.route_control == 'bfd' else omit }}"
        state: "{{ item.status if item.status is defined else omit }}"
      delegate_to: localhost
      loop: "{{ node_static_route }}"
      when: node_static_route is defined

    - name: Add a new nexthop to a prefix
      cisco.aci.aci_l3out_static_routes_nexthop:
        <<: *aci_login
        tenant: "{{ item.tenant }}"
        l3out: "{{ item.l3out }}"
        logical_node: "{{ item.l3out_node_profile }}"
        node_id: "{{ item.node_id | int }}"
        pod_id: "{{ item.pod_id | int }}"
        prefix: "{{ item.prefix }}"
        nexthop: "{{ item.next_hop_address }}"
        state: "{{ item.status if item.status is defined else omit }}"
      delegate_to: localhost
      loop: "{{ node_static_route }}"
      when: node_static_route is defined

    - name: Update Diff mode
      ansible.builtin.shell: python3 "{{ playbook_dir }}"/../scripts/excel_to_yaml.py --mode update_status_file --hostname {{ inventory_hostname }} --sheets node_static_route --automation_type {{ automation_type }}
      delegate_to: localhost
      when: node_static_route is defined and diff_mode_enabled == true


