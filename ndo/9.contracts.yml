---
- import_playbook: update.yml
- name : Contracts
  gather_facts: false
  hosts: all
  tasks:

    - name: Add a new filter and filter entry
      cisco.mso.mso_schema_template_filter_entry:
        filter: "{{ item.name }}"
        filter_description: "{{ item.description if item.description is defined else omit }}"
        schema: "{{ item.schema }}"
        template: "{{ item.template }}"
        entry: "{{ item.filter_entry_name }}"
        filter_entry_description: "{{ item.filter_entry_description if item.filter_entry_description is defined and item.filter_entry_description !='' else omit }}"
        ethertype: "{{ item.ethertype if item.ethertype is defined and item.ethertype !='' else omit }}"
        ip_protocol: "{{ item.ip_protocol if item.ip_protocol is defined and item.ip_protocol !='' else omit }}"
        arp_flag: "{{ item.arp_flag if item.arp_flag is defined and item.arp_flag !='' else omit }}"
        destination_from: "{{ item.destination_from | int if item.destination_to is defined and item.destination_to !='' else omit }}"
        destination_to: "{{ item.destination_to | int if item.destinationTo is defined and item.destinationTo !='' else omit }}"
        stateful: "{{ item.stateful if item.stateful is defined and item.stateful !='' else omit }}"
        tcp_session_rules: "{{ item.tcp_session_rules if item.tcp_session_rules is defined and item.tcp_session_rules !='' else omit }}"
        fragments_only: "{{ item.fragments_only if item.fragments_only is defined and item.fragments_only !='' else omit }}"
        state: "{{ item.status if item.status is defined and item.status != '' else omit }}"
      loop: "{{ filter }}"
      when: filter is defined

    - name: Add a new contract
      cisco.mso.mso_schema_template_contract_filter:
        contract: "{{ item.name }}"
        schema: "{{ item.schema}}"
        template: "{{ item.template }}"
        action: "{{ item.action if item.action is defined and item.action != '' else omit }}"
        contract_scope: "{{ item.contract_scope if item.contract_scope is defined and item.contract_scope != '' else omit }}"
        priority: "{{ item.priority if item.priority is defined and item.priority != '' else omit }}"
        qos_level: "{{ item.qos_level if item.qos_level is defined and item.qos_level != '' else omit }}"
        filter: "{{ item.filter }}"
        filter_schema: "{{ item.filter_schema }}"
        filter_template: "{{ item.filter_template}}"
        filter_directives: "{{ item.filter_directives if item.filter_directives is defined and item.filter_directives != '' else omit }}"
        state: "{{ item.status if item.status is defined and item.status != '' else omit }}"
      loop: "{{ contract }}"
      when: contract is defined

    - name: Bind contract to an EPG
      cisco.mso.mso_schema_template_anp_epg_contract:
        epg: "{{ item.epg}}"
        schema: "{{ item.schema }}"
        template: "{{ item.template }}"
        anp: "{{ item.app_profile_name }}"
        contract:
          name: "{{ item.contract }}"
          type: "{{ item.contract_type }}"
          template: "{{ item.contract_template }}"
          schema: "{{ item.contract_schema }}"
        state: "{{ item.status if item.status is defined and item.status != '' else omit }}"
      loop: "{{ contract_to_epg }}"
      when: contract_to_epg is defined

#    - name: Bind contract to an External EPG
#      cisco.mso.mso_schema_template_external_epg_contract:
#        schema: "{{ item.external_epg_schema_name }}"
#        template: "{{ item.external_epg_template_name }}"
#        state: "{{ item.status if item.status is defined else omit }}"
#        external_epg: "{{ item.name }}"
#        contract:
#          name: "{{ item.contract_name }}"
#          type: "{{ item.relationship_type }}"
#          schema: "{{ item.contract_schema_name }}"
#          template: "{{ item.contract_template_name }}"
#      loop: "{{ external_epg_contract  }}"
#      when: external_epg_contract is defined

    - name: Enable vzAny attribute on VRF
      cisco.mso.mso_schema_template_vrf:
        schema: "{{ item.schema }}"
        template: "{{ item.template }}"
        vrf: "{{ item.vrf }}"
        vzany: "{{ 'false' if item.status == 'absent' else 'true' }}"
      loop: "{{ contract_to_vrf }}"
      when: contract_to_vrf is defined and item.status == 'present'

    - name: Add a contract to a VRF
      cisco.mso.mso_schema_template_vrf_contract:
        schema: "{{ item.schema}}"
        template: "{{ item.template }}"
        vrf: "{{ item.vrf }}"
        contract:
          name: "{{ item.contract }}"
          type: "{{ item.contract_type }}"
          schema: "{{ item.contract_schema }}"
          template: "{{ item.contract_template }}"
        state: "{{ item.status if item.status is defined and item.status != '' else omit }}"
      loop: "{{ contract_to_vrf }}"
      when: contract_to_vrf is defined

    - name: Enable vzAny attribute on VRF
      cisco.mso.mso_schema_template_vrf:
        schema: "{{ item.schema }}"
        template: "{{ item.template }}"
        vrf: "{{ item.vrf }}"
        vzany: "{{ 'false' if item.status == 'absent' else 'true' }}"
      loop: "{{ contract_to_vrf }}"
      when: contract_to_vrf is defined and item.status == 'absent'